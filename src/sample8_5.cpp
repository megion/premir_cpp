#include "apue.h"
#include <sys/wait.h>

int main(void)
{
    pid_t pid;
    if ((pid = fork()) < 0) {
        err_sys("ошибка вызова функции fork");
    } else if (pid == 0) {
        /* первый потомок */
        if ((pid = fork()) < 0)
            err_sys("ошибка вызова функции fork");
        else if (pid > 0)
            exit(0);
        /* первый потомок, он же */
        /* родительский процесс для второго потомка */
        /*
        * Здесь продолжает работу второй потомок, для которого
        * родительским стал процесс init, поскольку настоящий
        * родительский процесс вызвал функцию exit() чуть выше.
        * Теперь мы можем продолжать работу, зная,
        * что когда процесс завершится, его код завершения
        * будет получен процессом init.
        */
        sleep(2);
        printf("второй потомок, идентификатор родительского процесса = %d\n",
               getppid());
        exit(0);
    }
    if (waitpid(pid, NULL, 0) != pid) /* ожидать завершения первого потомка */
        err_sys("ошибка вызова функции waitpid");
    /*
    * Здесь родительский (первоначальный) процесс продолжает работу,
    * поскольку он не является родительским
    * процессом для второго потомка.
    */
    exit(0);
}
